name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]

jobs:
  deploy:
    if: github.event_name == 'push' || (github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Update Code
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        command_timeout: 5m
        script: |
          cd /opt/tune-vote
          git remote set-url origin https://${{ secrets.GH_TOKEN }}@github.com/art3xias23/tune-vote.git
          git fetch origin main
          git reset --hard origin/main
          echo "Updated to: $(git rev-parse HEAD | cut -c1-7)"

    - name: 🔧 Install Dependencies & Restart Services
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        command_timeout: 5m
        script: |
          cd /opt/tune-vote

          # Install Node.js dependencies for Spotify proxy
          echo "Installing npm dependencies..."
          npm install --omit=dev
          echo "✅ Dependencies installed"

          # Restart Spotify proxy service
          echo "Restarting Spotify proxy..."
          sudo systemctl stop spotify-proxy
          sudo systemctl start spotify-proxy
          sleep 3
          echo "✅ Spotify proxy: $(systemctl is-active spotify-proxy)"
          echo "   Listening: $(sudo netstat -tlnp | grep 5001 | awk '{print $4}' || echo 'not found')"

          # Reload nginx configuration (in case nginx configs changed)
          echo "Reloading nginx configuration..."
          sudo nginx -t && sudo systemctl reload nginx || echo "⚠️ nginx config issue"
          echo "✅ nginx: $(systemctl is-active nginx)"

          # Test connectivity from host to proxy
          echo "Testing proxy connectivity..."
          if curl -s -m 5 http://localhost:5001/spotify/search?q=test\&type=artist\&limit=1 >/dev/null 2>&1; then
            echo "✅ Proxy reachable from host"
          else
            echo "❌ Proxy unreachable - checking service status..."
            sudo systemctl status spotify-proxy --no-pager -l
          fi

    - name: 🐳 Build Containers
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        command_timeout: 10m
        script: |
          cd /opt/tune-vote
          export REACT_APP_BUILD_NUMBER=${{ github.run_number }}
          export REACT_APP_BUILD_COMMIT=${{ github.sha }}
          docker compose down
          docker compose build --no-cache --quiet backend frontend

    - name: 🚀 Start Services
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        command_timeout: 5m
        script: |
          cd /opt/tune-vote
          export REACT_APP_BUILD_NUMBER=${{ github.run_number }}
          export REACT_APP_BUILD_COMMIT=${{ github.sha }}
          docker compose up -d
          docker system prune -f >/dev/null 2>&1

    - name: ⏳ Wait for Services
      run: sleep 20

    - name: ✅ Health Checks
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        command_timeout: 2m
        script: |
          cd /opt/tune-vote

          echo "Backend Health:"
          if curl -sf http://localhost:5000/api/health >/dev/null 2>&1; then
            echo "✅ Backend: Healthy"
          else
            echo "❌ Backend: Failed"
            exit 1
          fi

          echo "Frontend Health:"
          if curl -s http://localhost:3001/ 2>/dev/null | grep -q "Tune Vote"; then
            echo "✅ Frontend: Healthy"
          else
            echo "❌ Frontend: Failed"
            exit 1
          fi

          echo "Build Number Check:"
          BUILD_NUM=$(curl -s http://localhost:3001/ 2>/dev/null | grep -o "#[0-9]\+" | head -1)
          if [ -n "$BUILD_NUM" ]; then
            echo "✅ Build Number: $BUILD_NUM"
          else
            echo "⚠️ Build number not found"
          fi

    - name: 🎉 Deployment Complete
      run: echo "::notice::🎉 Successfully deployed build \#${{ github.run_number }} to production!"